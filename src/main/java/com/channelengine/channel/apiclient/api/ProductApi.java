/*
 * ChannelEngine Channel API
 * ChannelEngine API for channels
 *
 * The version of the OpenAPI document: 2.9.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.channelengine.channel.apiclient.api;

import com.channelengine.channel.apiclient.ApiCallback;
import com.channelengine.channel.apiclient.ApiClient;
import com.channelengine.channel.apiclient.ApiException;
import com.channelengine.channel.apiclient.ApiResponse;
import com.channelengine.channel.apiclient.Configuration;
import com.channelengine.channel.apiclient.Pair;
import com.channelengine.channel.apiclient.ProgressRequestBody;
import com.channelengine.channel.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.channelengine.channel.apiclient.model.ChannelProcessedChangesRequest;
import com.channelengine.channel.apiclient.model.CollectionOfChannelOfferResponse;
import com.channelengine.channel.apiclient.model.DataChangesProductType;
import com.channelengine.channel.apiclient.model.ModelApiResponse;
import com.channelengine.channel.apiclient.model.SingleOfChannelProductChangesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for productAcknowledgeDataChanges
     * @param channelProcessedChangesRequest The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAcknowledgeDataChangesCall(ChannelProcessedChangesRequest channelProcessedChangesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = channelProcessedChangesRequest;

        // create path and map variables
        String localVarPath = "/v2/products/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAcknowledgeDataChangesValidateBeforeCall(ChannelProcessedChangesRequest channelProcessedChangesRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productAcknowledgeDataChangesCall(channelProcessedChangesRequest, _callback);
        return localVarCall;

    }

    /**
     * Acknowledge Product Data Changes.
     * This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
     * @param channelProcessedChangesRequest The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse productAcknowledgeDataChanges(ChannelProcessedChangesRequest channelProcessedChangesRequest) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = productAcknowledgeDataChangesWithHttpInfo(channelProcessedChangesRequest);
        return localVarResp.getData();
    }

    /**
     * Acknowledge Product Data Changes.
     * This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
     * @param channelProcessedChangesRequest The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> productAcknowledgeDataChangesWithHttpInfo(ChannelProcessedChangesRequest channelProcessedChangesRequest) throws ApiException {
        okhttp3.Call localVarCall = productAcknowledgeDataChangesValidateBeforeCall(channelProcessedChangesRequest, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acknowledge Product Data Changes. (asynchronously)
     * This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to&lt;br /&gt;this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last&lt;br /&gt;time they have been updated) and is therefore able to only return the products&lt;br /&gt;that really have changed since the last call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The supplied ChannelReturnNo will be saved&lt;br /&gt;in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;&lt;br /&gt;fields consist of ChannelReferences which are sent in a previous call&lt;br /&gt;within the field &#39;Created&#39;.
     * @param channelProcessedChangesRequest The merchant references of the products which have been&lt;br /&gt; successfully created, updated or deleted (after a call to &#39;GetDataChanges&#39;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAcknowledgeDataChangesAsync(ChannelProcessedChangesRequest channelProcessedChangesRequest, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAcknowledgeDataChangesValidateBeforeCall(channelProcessedChangesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productAcknowledgeOfferChanges
     * @param keyIsMpn If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)
     * @param requestBody The channel references of the updated products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAcknowledgeOfferChangesCall(Boolean keyIsMpn, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/products/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyIsMpn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyIsMpn", keyIsMpn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAcknowledgeOfferChangesValidateBeforeCall(Boolean keyIsMpn, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productAcknowledgeOfferChangesCall(keyIsMpn, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Acknowledge Product Offer Changes.
     * After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
     * @param keyIsMpn If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)
     * @param requestBody The channel references of the updated products. (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelApiResponse productAcknowledgeOfferChanges(Boolean keyIsMpn, List<String> requestBody) throws ApiException {
        ApiResponse<ModelApiResponse> localVarResp = productAcknowledgeOfferChangesWithHttpInfo(keyIsMpn, requestBody);
        return localVarResp.getData();
    }

    /**
     * Acknowledge Product Offer Changes.
     * After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
     * @param keyIsMpn If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)
     * @param requestBody The channel references of the updated products. (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelApiResponse> productAcknowledgeOfferChangesWithHttpInfo(Boolean keyIsMpn, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = productAcknowledgeOfferChangesValidateBeforeCall(keyIsMpn, requestBody, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Acknowledge Product Offer Changes. (asynchronously)
     * After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the&lt;br /&gt;ChannelProductNo of the products that are successfully updated.&lt;br /&gt;Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.&lt;br /&gt;In advanced cases, the MerchantProductNo is used for this.&lt;br /&gt;In that case, bool keyIsMpn should be true.
     * @param keyIsMpn If set to true, changes has to be a list of merchant references instead of channel references. (optional, default to false)
     * @param requestBody The channel references of the updated products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAcknowledgeOfferChangesAsync(Boolean keyIsMpn, List<String> requestBody, final ApiCallback<ModelApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAcknowledgeOfferChangesValidateBeforeCall(keyIsMpn, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productGetDataChanges
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetDataChangesCall(Integer maxCount, Boolean stripHtml, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/products/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (stripHtml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripHtml", stripHtml));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productGetDataChangesValidateBeforeCall(Integer maxCount, Boolean stripHtml, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productGetDataChangesCall(maxCount, stripHtml, _callback);
        return localVarCall;

    }

    /**
     * Get Product Data Changes.
     * Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @return SingleOfChannelProductChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SingleOfChannelProductChangesResponse productGetDataChanges(Integer maxCount, Boolean stripHtml) throws ApiException {
        ApiResponse<SingleOfChannelProductChangesResponse> localVarResp = productGetDataChangesWithHttpInfo(maxCount, stripHtml);
        return localVarResp.getData();
    }

    /**
     * Get Product Data Changes.
     * Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @return ApiResponse&lt;SingleOfChannelProductChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleOfChannelProductChangesResponse> productGetDataChangesWithHttpInfo(Integer maxCount, Boolean stripHtml) throws ApiException {
        okhttp3.Call localVarCall = productGetDataChangesValidateBeforeCall(maxCount, stripHtml, null);
        Type localVarReturnType = new TypeToken<SingleOfChannelProductChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Data Changes. (asynchronously)
     * Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.&lt;br /&gt;The response contains the products which should be created, updated or removed from the channel.&lt;br /&gt;After the products have been received and processed successfully &#39;v2/products/data&#39; should&lt;br /&gt;be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).&lt;br /&gt;ChannelEngine will save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the&lt;br /&gt;products that really have changes (and therefore should be created, updated or deleted).&lt;br /&gt;A channel willing to integrate with channelengine should therefore only do the following things:&lt;br /&gt; 1. Periodically poll &#39;v2/products/data&#39; for changes.&lt;br /&gt; 2. If any products are returned, save, update or remove these products.&lt;br /&gt; 3. Send the merchant references of the products that have succesfully been processed&lt;br /&gt; in step 2 to POST &#39;v2/products/data&#39;.&lt;br /&gt; &lt;br /&gt;These three simple steps will make sure that the products on the channel will be synchronized&lt;br /&gt;with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer&lt;br /&gt;whose products should be returned. Note that child products are only returned if their parent product&lt;br /&gt;has been acknowledged in a previous transaction. This way ChannelEngine knows the value of&lt;br /&gt;&#39;ChannelParentReference&#39;.
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetDataChangesAsync(Integer maxCount, Boolean stripHtml, final ApiCallback<SingleOfChannelProductChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productGetDataChangesValidateBeforeCall(maxCount, stripHtml, _callback);
        Type localVarReturnType = new TypeToken<SingleOfChannelProductChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productGetDataChangesFull
     * @param productType Optional - Type of products (optional)
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetDataChangesFullCall(DataChangesProductType productType, Integer maxCount, Boolean stripHtml, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/products/data/full";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (stripHtml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripHtml", stripHtml));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productGetDataChangesFullValidateBeforeCall(DataChangesProductType productType, Integer maxCount, Boolean stripHtml, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productGetDataChangesFullCall(productType, maxCount, stripHtml, _callback);
        return localVarCall;

    }

    /**
     * Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE
     * 
     * @param productType Optional - Type of products (optional)
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @return SingleOfChannelProductChangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SingleOfChannelProductChangesResponse productGetDataChangesFull(DataChangesProductType productType, Integer maxCount, Boolean stripHtml) throws ApiException {
        ApiResponse<SingleOfChannelProductChangesResponse> localVarResp = productGetDataChangesFullWithHttpInfo(productType, maxCount, stripHtml);
        return localVarResp.getData();
    }

    /**
     * Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE
     * 
     * @param productType Optional - Type of products (optional)
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @return ApiResponse&lt;SingleOfChannelProductChangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SingleOfChannelProductChangesResponse> productGetDataChangesFullWithHttpInfo(DataChangesProductType productType, Integer maxCount, Boolean stripHtml) throws ApiException {
        okhttp3.Call localVarCall = productGetDataChangesFullValidateBeforeCall(productType, maxCount, stripHtml, null);
        Type localVarReturnType = new TypeToken<SingleOfChannelProductChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Data Changes with an optional product type filter. If you select product type products will be filtered by it.  If you won&#39;t pass product type you will get products with types: CHILD, PARENT, GRANDPARENT, SINGLE (asynchronously)
     * 
     * @param productType Optional - Type of products (optional)
     * @param maxCount Optional - limit the amount of products returned for each field&lt;br /&gt; (ToBeCreated, ToBeUpdated, ToBeRemoved) to this number. (optional)
     * @param stripHtml Optional - strips html by default on all fields (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetDataChangesFullAsync(DataChangesProductType productType, Integer maxCount, Boolean stripHtml, final ApiCallback<SingleOfChannelProductChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productGetDataChangesFullValidateBeforeCall(productType, maxCount, stripHtml, _callback);
        Type localVarReturnType = new TypeToken<SingleOfChannelProductChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productGetOfferChanges
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetOfferChangesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/products/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productGetOfferChangesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = productGetOfferChangesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Product Offer Changes.
     * GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
     * @return CollectionOfChannelOfferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CollectionOfChannelOfferResponse productGetOfferChanges() throws ApiException {
        ApiResponse<CollectionOfChannelOfferResponse> localVarResp = productGetOfferChangesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Product Offer Changes.
     * GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
     * @return ApiResponse&lt;CollectionOfChannelOfferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionOfChannelOfferResponse> productGetOfferChangesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = productGetOfferChangesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CollectionOfChannelOfferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Offer Changes. (asynchronously)
     * GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;&lt;br /&gt;endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)&lt;br /&gt;therefore be called more often to keep this information (which might change frequently) up to date.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productGetOfferChangesAsync(final ApiCallback<CollectionOfChannelOfferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productGetOfferChangesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CollectionOfChannelOfferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
